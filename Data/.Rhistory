head(fit$coefficients)
plotQLDisp(fit)
summary(fit$df.prior)
# Testing for differential expression
H.LvsP <- makeContrasts(HT29_KO-HT29_WT, levels=design) ####
res <- glmQLFTest(fit, contrast=H.LvsP)
topTags(res)
is.de <- decideTestsDGE(res)
summary(is.de)
plotMD(res, status=is.de, values=c(1,-1), col=c("red","blue"), legend="topright")
# Differentially expressed
DE_F1_A <- as.data.frame(is.de)
DE_F1_B <- subset(DE_F1_A, `1*HT29_KO -1*HT29_WT` != 0)
DE_F1_B$include <- rownames(DE_F1_B)
DE_F1_C <- as.data.frame(topTags(res,n=Inf))
DE_results1 <- subset(DE_F1_C, genes %in% DE_F1_B$include)
# Differential expression above a fold-change threshold
tr <- glmTreat(fit, contrast=H.LvsP, lfc=log2(1.5))
topTags(tr)
is.de <- decideTestsDGE(tr,lfc=log2(1.5),p.value=0.01)
summary(is.de)
417+188
is.de <- decideTestsDGE(tr,lfc=log2(1.5),p.value=0.05)
summary(is.de)
417+188
# Differential expression above a fold-change threshold
tr <- glmTreat(fit, contrast=H.LvsP, lfc=log2(1.5))
topTags(tr)
is.de <- decideTestsDGE(tr,lfc=log2(1.5),p.value=0.05)
summary(is.de)
417+188
is.de <- decideTestsDGE(tr)
summary(is.de)
499+262
is.de <- decideTestsDGE(tr,p.value = 0.05)
summary(is.de)
is.de <- decideTestsDGE(tr,lfc=log2(1.5),p.value = 0.05)
summary(is.de)
is.de <- decideTestsDGE(tr,lfc=log2(1.5),p.value = 0.05)
summary(is.de)
is.de <- decideTestsDGE(tr,lfc=log2(1.5),p.value = 0.01)
summary(is.de)
summary(is.de)
is.de <- decideTestsDGE(tr,lfc=log2(1.0),p.value = 0.01)
summary(is.de)
is.de <- decideTestsDGE(tr,p.value = 0.01)
summary(is.de)
is.de <- decideTestsDGE(tr)
summary(is.de)
499+262
plotMD(tr, status=is.de, values=c(1,-1), col=c("red","blue"), legend="topright")
??theme
plotMD(tr, status=is.de, values=c(1,-1), col=c("red","blue"), legend="topright") +
+ theme(axis.text = element_text(size = 10))
plotMD(tr, status=is.de, values=c(1,-1), col=c("red","blue"), legend="topright") +
theme(axis.text = element_text(size = 10))
plotMD(tr, status=is.de, values=c(1,-1), col=c("red","blue"), legend="topright") +
theme(axis.text = element_text(size = 10))
plotMD(tr, status=is.de, values=c(1,-1), col=c("red","blue"), legend="topright")# +
plotMD(tr, status=is.de, values=c(1,-1), col=c("red","blue"), legend="topright") +
theme(axis.text = element_text(size = 10))
plotMD(tr, status=is.de, values=c(1,-1), col=c("red","blue"), legend="topright") +
theme(axis.text = element_text(size = 120))
??plotMD
figure_02 <- plotMD(tr, status=is.de, values=c(1,-1), col=c("red","blue"), legend="topright")
str(figure_02)
figure_02 <- plotMD(tr, status=is.de, values=c(1,-1), col=c("red","blue"), legend="topright")
figure_02
figure_02
figure_02 <- plotMD(tr, status=is.de, values=c(1,-1), col=c("red","blue"), legend="topright")
figure_02
figure_02 <- plotMD(tr, status=is.de, values=c(1,-1), col=c("red","blue"), legend="topright")
is.de <- decideTestsDGE(tr, p.value = 0.01)
summary(is.de)
# Differential expression above a fold-change threshold
tr <- glmTreat(fit, contrast=H.LvsP, lfc=log2(1.5))
topTags(tr)
is.de <- decideTestsDGE(tr, p.value = 0.01)
summary(is.de)
188+417
group <- c("HT29_WT","HT29_WT","HT29_WT","HT29_WT","HT29_KO","HT29_KO","HT29_KO",
"HT29_KO")
group <- factor(group)
table(group)
# Loading read counts
# Mac
setwd("~/Dropbox/GU")
GenewiseCounts <- read.delim("readcount.xls", row.names="geneID")
dim(GenewiseCounts)
head(GenewiseCounts)
y <- DGEList(GenewiseCounts, group=group,genes=rownames(GenewiseCounts))
y$genes$Symbol <- mapIds(org.Hs.eg.db, rownames(y), keytype="ENSEMBL", column="SYMBOL")
y$genes$EntrezID <- mapIds(org.Hs.eg.db, rownames(y), keytype="ENSEMBL", column="ENTREZID")
head(y$gene)
y <- y[!is.na(y$genes$Symbol), ]
dim(y)
# Filtering to remove low counts
keep <- rowSums(cpm(y) > 0.5) >= 4
table(keep)
y <- y[keep, , keep.lib.sizes=FALSE]
# Normalization for composition bias
y <- calcNormFactors(y)
options(digits=3)
y$samples
plotMD(y, column=1)
abline(h=0, col="red", lty=2, lwd=2)
#Exploring differences between libraries
pch <- c(17,16)
colors <- c("red","blue")
plotMDS(y, col=colors[group], pch=pch[group])
legend("topleft", legend=levels(group), pch=pch, col=colors, ncol=2)
# Design matrix
design <- model.matrix(~0+group)
colnames(design) <- levels(group)
design
# Dispersion estimation
y <- estimateDisp(y, design, robust=TRUE)
plotMDS(y, col=colors[group], pch=pch[group])
plotMDS(y, col=colors[group], pch=pch[group])
legend("topleft", legend=levels(group), pch=pch, col=colors, ncol=2)
plotMDS(y, col=colors[group], pch=pch[group,pch=11])
??plotMDS
plotMDS(y, col=colors[group], pch=pch[group], cex =5)
plotMDS(y, col=colors[group], pch=pch[group], cex = 2)
plotMDS(y, col=colors[group], pch=pch[group], cex = 2)
??plotMDS
legend("topleft", legend=levels(group), pch=pch, col=colors, ncol=2)
# Load libraries
library(ggbio)
library(rtracklayer)
library(biovizBase)
library(BSgenome.Drerio.UCSC.danRer10)
library(dplyr)
library(reshape)
setwd("~/Documents/GitHub/Met_zebrafish_germline/Data")
# Set directory
setwd("~/Documents/GitHub/Met_zebrafish_germline/Data")
# Load data and transform variables
data_Fig4A <- read.csv2("probes_1Mb.txt",sep = "\t",stringsAsFactors = FALSE,dec=".")
data_Fig4A$norm_21d_egfp <- data_Fig4A$X21d_egfp/(sum(data_Fig4A$X21d_egfp)/nrow(data_Fig4A))
data_Fig4A$norm_25d_egfp <- data_Fig4A$X25d_egfp/(sum(data_Fig4A$X25d_egfp)/nrow(data_Fig4A))
data_Fig4A$norm_28d_egfp <- data_Fig4A$X28d_egfp/(sum(data_Fig4A$X28d_egfp)/nrow(data_Fig4A))
# Create genomic ranges table
gr.table <- transformDfToGr(data_Fig4A, seqnames = "Chromosome", start = "Start",end="End")
head(gr.table)
# Calculate seq lenghts
seqlengths(gr.table)
danRer10IdeogramCyto <- getIdeogram("danRer10")
seqlengths(gr.table) <- as.numeric(seqlengths(danRer10IdeogramCyto)[1:26])
seqlengths(gr.table)
# Plot GrandLinear GSC 21d
plotGrandLinear(gr.table, geom = "area",aes(y = log10(norm_21d_egfp+1))) + ylab("") + ylim(0,3) + theme_gray()+
theme(plot.background = element_blank(),
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )+
theme(panel.border= element_blank(),legend.position="none")+
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
# Plot GrandLinear GSC 25d
plotGrandLinear(gr.table, geom = "area",aes(y = log10(norm_25d_egfp+1))) + ylab("") + ylim(0,3) + theme_gray()+
theme(plot.background = element_blank(),
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )+
theme(panel.border= element_blank(),legend.position="none")+
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
# Plot GrandLinear GSC 28d
plotGrandLinear(gr.table, geom = "area",aes(y = log10(norm_28d_egfp+1))) + ylab("") + ylim(0,3) + theme_gray()+
theme(plot.background = element_blank(),
panel.background = element_rect(fill = "white",
colour = "white",
size = 0.5, linetype = "solid"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )+
theme(panel.border= element_blank(),legend.position="none")+
theme(axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5))
############################################################
# Ideogram                                                 #
############################################################
danRer10IdeogramCyto <- getIdeogram("danRer10", cytoband = FALSE)
plotIdeogram(danRer10IdeogramCyto,"chr4",xlabel = TRUE,zoom.region = c(76310000, 76335000),
color = "red",fill = "red",alpha = 0.5,size = 2,aspect.ratio = 1/10)
bg <- BSgenome.Drerio.UCSC.danRer10
gr <- GRanges(seqnames = "4", ranges = IRanges(start = 76310000, end = 76335000))
CTOT.bam <- "CTOT.bam"
autoplot(CTOT.bam, bsgenome = bg,which = gr, geom = "area") + xlim(gr) + ylim(c(0,100))
CTOT.bam <- "CTOT.bam"
autoplot(CTOT.bam, bsgenome = bg,which = gr, geom = "area") + xlim(gr) + ylim(c(0,100))
CTOB.bam <- "CTOB.bam"
autoplot(CTOB.bam, bsgenome = bg,which = gr, geom = "area") + xlim(gr) + ylim(c(0,100))
bg <- BSgenome.Drerio.UCSC.danRer10
gr <- GRanges(seqnames = "4", ranges = IRanges(start = 76310000, end = 76335000))
CTOT.bam <- "CTOT.bam"
autoplot(CTOT.bam, bsgenome = bg,which = gr, geom = "area") + xlim(gr) + ylim(c(0,100))
CTOT.bam <- "CTOT.bam"
autoplot(CTOT.bam, bsgenome = bg,which = gr, geom = "area") + xlim(gr) + ylim(c(0,100))
CTOB.bam <- "CTOB.bam"
autoplot(CTOB.bam, bsgenome = bg,which = gr, geom = "area") + xlim(gr) + ylim(c(0,100))
# Load data and transform variables
Wilson_data <- read.csv2("Wilson_data.csv",sep = ",",stringsAsFactors = FALSE,dec=".")
str(Wilson_data)
p <- ggplot(Wilson_data, aes(Coordinates,P_value))
p + geom_point(aes(colour = factor(Strain)),size = 3) +
geom_hline(yintercept=-log(0.01), linetype="dashed", color = "black") +
xlim(73900000, 76625712)
# Load data and transform variables
data_fig_5b <- read.csv2("fem_rDNA.csv",sep = ",",stringsAsFactors = FALSE,dec=".")
# Load data and transform variables
fig_6b <- read.csv2("Data_summary_B.csv",sep = ",",stringsAsFactors = FALSE,dec=".")
str(fig_6b)
p <- ggplot(fig_6b, aes(Day,Amplification))
p + geom_point(aes(colour = factor(Sex)),size = 8) +
scale_color_manual(values=c("#ff0000","#0000ff","#808080"))+
xlim(0,61) + ylim(0,25) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5))
# Load data and transform variables
data_fig_5b <- read.csv2("fem_rDNA.csv",sep = ",",stringsAsFactors = FALSE,dec=".")
# Load data and transform variables
data_fig_5b <- read.csv2("fem_rDNA.csv",sep = ",",stringsAsFactors = FALSE,dec=".")
data_cleaned_fig_5b = data_fig_5b[data_fig_5b$type=="egfp",]
data_cleaned_fig_5b = data_cleaned_fig_5b[data_cleaned_fig_5b$n_calls_fem_rDNA>10,]
p <- ggplot(data_cleaned_fig_5b, aes(per_reads_fem_rDNA,met_rDNA))
p + geom_point(aes(colour = factor(sex)),size = 9) +
scale_color_manual(values=c("#FFB6C1","#ff0000","#add8e6","#0000ff","#808080"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5))
# Load data and transform variables
data_fig_5b <- read.csv2("data_fem_rDNA.csv",sep = ",",stringsAsFactors = FALSE,dec=".")
data_cleaned_fig_5b = data_fig_5b[data_fig_5b$type=="egfp",]
data_cleaned_fig_5b = data_cleaned_fig_5b[data_cleaned_fig_5b$n_calls_fem_rDNA>10,]
p <- ggplot(data_cleaned_fig_5b, aes(per_reads_fem_rDNA,met_rDNA))
p + geom_point(aes(colour = factor(sex)),size = 9) +
scale_color_manual(values=c("#FFB6C1","#ff0000","#add8e6","#0000ff","#808080"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5)) +
lo
# Load data and transform variables
data_fig_5b <- read.csv2("data_fem_rDNA.csv",sep = ",",stringsAsFactors = FALSE,dec=".")
str(data_fig_5b)
# Load data and transform variables
data_fig_5b <- read.csv2("data_fem_rDNA.csv",sep = ",",stringsAsFactors = FALSE,dec=",")
data_cleaned_fig_5b = data_fig_5b[data_fig_5b$CG_calls>10,]
p <- ggplot(data_cleaned_fig_5b, aes(Amplification,CG_met))
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5))+
scale_x_continuous(trans='log10')
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5))
scale_x_continuous(trans='log10')
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5))
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5)) +
scale_x_continuous(trans='log10')
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5)) +
scale_x_continuous(trans='log2')
# Load data and transform variables
data_fig_5b <- read.csv2("data_fem_rDNA.csv",sep = ",",stringsAsFactors = FALSE,dec=",")
data_cleaned_fig_5b = data_fig_5b[data_fig_5b$CG_calls>10,]
p <- ggplot(data_cleaned_fig_5b, aes(Amplification,CG_met))
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5)) +
scale_x_continuous(trans='log10')
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5)) +
#  scale_x_continuous(trans='log10')
log10(10)
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5))
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5)) +
scale_x_log10()
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5)) +
scale_x_sqrt()
# Load data and transform variables
data_fig_5b <- read.csv2("data_fem_rDNA.csv",sep = ",",stringsAsFactors = FALSE,dec=",")
data_cleaned_fig_5b = data_fig_5b[data_fig_5b$CG_calls>10,]
p <- ggplot(data_cleaned_fig_5b, aes(Amplification,CG_met))
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5)) +
scale_x_sqrt()
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5)) +
scale_x_log10()
View(data_cleaned_fig_5b)
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5)) +
scale_y_log10()
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5)) +
scale_x_log10()
log10(0)
log10(0.1)
log10(0.01)
View(data_cleaned_fig_5b)
data_cleaned_fig_5b = data_cleaned_fig_5b[data_cleaned_fig_5b$Amplification>1]
p <- ggplot(data_cleaned_fig_5b, aes(Amplification,CG_met))
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5)) +
scale_x_log10()
data_cleaned_fig_5b$Amplification
data_cleaned_fig_5b = data_cleaned_fig_5b[data_cleaned_fig_5b$Amplification>1]
data_cleaned_fig_5b = data_fig_5b[data_fig_5b$CG_calls>10,]
data_cleaned_fig_5b = data_cleaned_fig_5b[data_cleaned_fig_5b$Amplification>1]
data_cleaned_fig_5b$Amplification
data_cleaned_fig_5b = data_cleaned_fig_5b[data_cleaned_fig_5b$Amplification>1,]
data_cleaned_fig_5b$Amplification
p <- ggplot(data_cleaned_fig_5b, aes(Amplification,CG_met))
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5)) +
scale_x_log10()
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
#  xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5)) +
scale_x_log10()
data_cleaned_fig_5b = data_fig_5b[data_fig_5b$CG_calls>10,]
data_cleaned_fig_5b$Amplification
p <- ggplot(data_cleaned_fig_5b, aes(Amplification,CG_met))
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
#  xlim(0,25) + ylim(0,100) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5)) +
scale_x_log10()
# Load data and transform variables
data_fig_5b <- read.csv2("data_fem_rDNA.csv",sep = ",",stringsAsFactors = FALSE,dec=",")
data_cleaned_fig_5b = data_fig_5b[data_fig_5b$CG_calls>10,]
data_cleaned_fig_5b$Amplification
p <- ggplot(data_cleaned_fig_5b, aes(Amplification,CG_met))
p + geom_point(aes(colour = factor(Label)),size = 9) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5)) +
scale_x_log10()
p + geom_point(aes(colour = factor(Label)),size = 6) +
scale_color_manual(values=c("#808080","#FFB6C1","#add8e6","#FF00FF",
"#ff0000","#0000ff","#00AA00"))+
geom_vline(xintercept = 1, linetype= "dashed", color = "black")+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_line(size=0.5)) +
scale_x_log10()
